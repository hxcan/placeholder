// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AmqpFunctionName.proto

package com.stupidbeauty.hxlauncher;

/**
 * Protobuf enum {@code com.stupidbeauty.hxlauncher.AmqpFunctionName}
 */
public enum AmqpFunctionName
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *无意义。
   * </pre>
   *
   * <code>Nonsense = 0;</code>
   */
  Nonsense(0),
  /**
   * <pre>
   *开始语音识别。
   * </pre>
   *
   * <code>StartVoiceRecognize = 1;</code>
   */
  StartVoiceRecognize(1),
  /**
   * <pre>
   *设置工作语言。
   * </pre>
   *
   * <code>SetLanguage = 2;</code>
   */
  SetLanguage(2),
  /**
   * <pre>
   *报告语音识别进程的错误。
   * </pre>
   *
   * <code>ReportVoiceRecognizeProcessError = 3;</code>
   */
  ReportVoiceRecognizeProcessError(3),
  /**
   * <pre>
   *报告语音输入设备源。
   * </pre>
   *
   * <code>ReportAudioSoundSource = 4;</code>
   */
  ReportAudioSoundSource(4),
  /**
   * <pre>
   *终止嘴型序列。
   * </pre>
   *
   * <code>CancelPhenem = 5;</code>
   */
  CancelPhenem(5),
  /**
   * <pre>
   *设置人像的背景图片。
   * </pre>
   *
   * <code>SetAvatarBackgroundImage = 6;</code>
   */
  SetAvatarBackgroundImage(6),
  /**
   * <pre>
   *设置三维人像渲染相机的位置及角度。
   * </pre>
   *
   * <code>Set3DEngineCameraPositionRotation = 7;</code>
   */
  Set3DEngineCameraPositionRotation(7),
  /**
   * <pre>
   *设置三维人像的可见性。
   * </pre>
   *
   * <code>SetAvatarVisible = 8;</code>
   */
  SetAvatarVisible(8),
  /**
   * <pre>
   *设置三维人像的几何属性。
   * </pre>
   *
   * <code>SetAvatarGeometry = 9;</code>
   */
  SetAvatarGeometry(9),
  /**
   * <pre>
   *执行嘴型序列。
   * </pre>
   *
   * <code>ExecutePhenemSequence = 10;</code>
   */
  ExecutePhenemSequence(10),
  /**
   * <pre>
   *重新载入网页应用。
   * </pre>
   *
   * <code>ReloadWebApplication = 11;</code>
   */
  ReloadWebApplication(11),
  /**
   * <pre>
   *执行动作。
   * </pre>
   *
   * <code>InputAction = 12;</code>
   */
  InputAction(12),
  /**
   * <pre>
   *执行表情。
   * </pre>
   *
   * <code>InputExpression = 13;</code>
   */
  InputExpression(13),
  /**
   * <pre>
   *终止动作。
   * </pre>
   *
   * <code>TerminateAction = 14;</code>
   */
  TerminateAction(14),
  /**
   * <pre>
   *设置相机的位置。
   * </pre>
   *
   * <code>SetAvatarCameraPosition = 15;</code>
   */
  SetAvatarCameraPosition(15),
  /**
   * <pre>
   *执行人像特殊效果。
   * </pre>
   *
   * <code>ExecuteAvatarEffection = 16;</code>
   */
  ExecuteAvatarEffection(16),
  /**
   * <pre>
   *隐藏相机预览。
   * </pre>
   *
   * <code>HideCameraPreview = 17;</code>
   */
  HideCameraPreview(17),
  /**
   * <pre>
   *执行人像宏指令。
   * </pre>
   *
   * <code>ExecuteAvatarMacro = 18;</code>
   */
  ExecuteAvatarMacro(18),
  /**
   * <pre>
   *显示摄像头预览。
   * </pre>
   *
   * <code>ShowCameraPreview = 19;</code>
   */
  ShowCameraPreview(19),
  /**
   * <pre>
   *开始人脸检测。
   * </pre>
   *
   * <code>StartFaceDetect = 20;</code>
   */
  StartFaceDetect(20),
  /**
   * <pre>
   *开始人脸识别。
   * </pre>
   *
   * <code>StartFaceRecognize = 21;</code>
   */
  StartFaceRecognize(21),
  /**
   * <pre>
   *开始发送图片帧数据流。
   * </pre>
   *
   * <code>StartFrameVoip = 22;</code>
   */
  StartFrameVoip(22),
  /**
   * <pre>
   *开始扫描二维码。
   * </pre>
   *
   * <code>StartQrCodeScan = 23;</code>
   */
  StartQrCodeScan(23),
  /**
   * <pre>
   *开始二维码/嘉宾证混合扫描。
   * </pre>
   *
   * <code>StartExtQrOcrHybridScan = 24;</code>
   */
  StartExtQrOcrHybridScan(24),
  /**
   * <pre>
   *停止二维码/嘉宾证混合扫描。
   * </pre>
   *
   * <code>StopExtQrOcrHybridScan = 25;</code>
   */
  StopExtQrOcrHybridScan(25),
  /**
   * <pre>
   *停止二维码扫描。
   * </pre>
   *
   * <code>StopQrCodeScan = 26;</code>
   */
  StopQrCodeScan(26),
  /**
   * <pre>
   *报告，听到了人声。
   * </pre>
   *
   * <code>ReportHeardHumanVoice = 27;</code>
   */
  ReportHeardHumanVoice(27),
  /**
   * <pre>
   *报告，被唤醒。
   * </pre>
   *
   * <code>ReportWakedUp = 28;</code>
   */
  ReportWakedUp(28),
  /**
   * <pre>
   *要求退出。
   * </pre>
   *
   * <code>Quit = 29;</code>
   */
  Quit(29),
  /**
   * <pre>
   *报告精确语音指令。
   * </pre>
   *
   * <code>ReportAccurateVoiceCommand = 30;</code>
   */
  ReportAccurateVoiceCommand(30),
  /**
   * <pre>
   *报告语音识别结果。
   * </pre>
   *
   * <code>ReportVoiceRecognized = 31;</code>
   */
  ReportVoiceRecognized(31),
  /**
   * <pre>
   *报告二维码嘉宾证扫描结果。
   * </pre>
   *
   * <code>ReportQrOcrHybridScanResult = 32;</code>
   */
  ReportQrOcrHybridScanResult(32),
  /**
   * <pre>
   *报告二维码扫描结果。
   * </pre>
   *
   * <code>ReportQrCodeScanResult = 33;</code>
   */
  ReportQrCodeScanResult(33),
  /**
   * <pre>
   *报告人脸识别结果。
   * </pre>
   *
   * <code>ReportFaceRecognizeResult = 34;</code>
   */
  ReportFaceRecognizeResult(34),
  /**
   * <pre>
   *报告人脸消失。
   * </pre>
   *
   * <code>ReportFaceGone = 35;</code>
   */
  ReportFaceGone(35),
  /**
   * <pre>
   *报告人脸出现。
   * </pre>
   *
   * <code>ReportFaceDetected = 36;</code>
   */
  ReportFaceDetected(36),
  /**
   * <pre>
   *报告人脸检测细节更新。
   * </pre>
   *
   * <code>ReportFaceDetectUpdate = 37;</code>
   */
  ReportFaceDetectUpdate(37),
  /**
   * <pre>
   *报告发声完毕。
   * </pre>
   *
   * <code>ReportSpeechFinished = 38;</code>
   */
  ReportSpeechFinished(38),
  /**
   * <pre>
   *报告发声开始。
   * </pre>
   *
   * <code>ReportSpeechStarted = 39;</code>
   */
  ReportSpeechStarted(39),
  /**
   * <pre>
   *人体检测模块主动报告人体检测状态。
   * </pre>
   *
   * <code>ReportHumanBodyDetectStatus = 40;</code>
   */
  ReportHumanBodyDetectStatus(40),
  /**
   * <pre>
   *由前端发起的，向人体检测模块查询当前的人体检测状态。
   * </pre>
   *
   * <code>GetHumanBodyDetectStatus = 41;</code>
   */
  GetHumanBodyDetectStatus(41),
  /**
   * <pre>
   *人体检测模块，对于前端发起的查询做出回复。
   * </pre>
   *
   * <code>ReplyGetHumanBodyDetectStatus = 42;</code>
   */
  ReplyGetHumanBodyDetectStatus(42),
  /**
   * <pre>
   *设置语音识别引擎。
   * </pre>
   *
   * <code>SetVoiceRecognizeEngine = 43;</code>
   */
  SetVoiceRecognizeEngine(43),
  /**
   * <pre>
   *查询读卡器模块的状态。
   * </pre>
   *
   * <code>CardReaderGetDeviceStatus = 44;</code>
   */
  CardReaderGetDeviceStatus(44),
  /**
   * <pre>
   *读卡器模块开始做出读卡动作。
   * </pre>
   *
   * <code>CardReaderGetCardInfo = 45;</code>
   */
  CardReaderGetCardInfo(45),
  /**
   * <pre>
   *读卡器模块停止读卡动作。
   * </pre>
   *
   * <code>CardReaderStopReadCard = 46;</code>
   */
  CardReaderStopReadCard(46),
  /**
   * <pre>
   *终止发声。
   * </pre>
   *
   * <code>CancelPendingTts = 47;</code>
   */
  CancelPendingTts(47),
  /**
   * <pre>
   *语音合成或播放录音发声。
   * </pre>
   *
   * <code>Speak = 48;</code>
   */
  Speak(48),
  /**
   * <pre>
   *     StopArchiveSoundRecord=49; //停止存档式录音。已废弃。
   *     StartArchiveSoundRecord=50; //开始存档式录音。已废弃。
   * </pre>
   *
   * <code>SetMultiTouchEnabled = 51;</code>
   */
  SetMultiTouchEnabled(51),
  /**
   * <pre>
   *显示错误码页面。
   * </pre>
   *
   * <code>ShowErrorCodePage = 52;</code>
   */
  ShowErrorCodePage(52),
  /**
   * <pre>
   *最小化．
   * </pre>
   *
   * <code>Minimize = 53;</code>
   */
  Minimize(53),
  /**
   * <pre>
   *显示开发者工具。
   * </pre>
   *
   * <code>ShowDeveloperTools = 54;</code>
   */
  ShowDeveloperTools(54),
  /**
   * <pre>
   *报告，窗口被激活。
   * </pre>
   *
   * <code>ReportWindowActivated = 55;</code>
   */
  ReportWindowActivated(55),
  /**
   * <pre>
   *报告，错误码。
   * </pre>
   *
   * <code>ReportErrorCode = 56;</code>
   */
  ReportErrorCode(56),
  /**
   * <pre>
   *显示设置页面。
   * </pre>
   *
   * <code>ShowSettingsPage = 57;</code>
   */
  ShowSettingsPage(57),
  /**
   * <pre>
   *恢复窗口。
   * </pre>
   *
   * <code>RestoreWindow = 58;</code>
   */
  RestoreWindow(58),
  /**
   * <pre>
   *结束连续语音识别。
   * </pre>
   *
   * <code>FinishVoiceRecognize = 59;</code>
   */
  FinishVoiceRecognize(59),
  /**
   * <pre>
   *在线语音合成。
   * </pre>
   *
   * <code>OnlineTts = 60;</code>
   */
  OnlineTts(60),
  /**
   * <pre>
   *停止语音识别。
   * </pre>
   *
   * <code>StopVoiceRecognize = 61;</code>
   */
  StopVoiceRecognize(61),
  /**
   * <pre>
   *报告宏执行结束。
   * </pre>
   *
   * <code>ReportMacroFinished = 62;</code>
   */
  ReportMacroFinished(62),
  /**
   * <pre>
   *报告宏语音执行结束。
   * </pre>
   *
   * <code>ReportMacroVoiceFinished = 63;</code>
   */
  ReportMacroVoiceFinished(63),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *无意义。
   * </pre>
   *
   * <code>Nonsense = 0;</code>
   */
  public static final int Nonsense_VALUE = 0;
  /**
   * <pre>
   *开始语音识别。
   * </pre>
   *
   * <code>StartVoiceRecognize = 1;</code>
   */
  public static final int StartVoiceRecognize_VALUE = 1;
  /**
   * <pre>
   *设置工作语言。
   * </pre>
   *
   * <code>SetLanguage = 2;</code>
   */
  public static final int SetLanguage_VALUE = 2;
  /**
   * <pre>
   *报告语音识别进程的错误。
   * </pre>
   *
   * <code>ReportVoiceRecognizeProcessError = 3;</code>
   */
  public static final int ReportVoiceRecognizeProcessError_VALUE = 3;
  /**
   * <pre>
   *报告语音输入设备源。
   * </pre>
   *
   * <code>ReportAudioSoundSource = 4;</code>
   */
  public static final int ReportAudioSoundSource_VALUE = 4;
  /**
   * <pre>
   *终止嘴型序列。
   * </pre>
   *
   * <code>CancelPhenem = 5;</code>
   */
  public static final int CancelPhenem_VALUE = 5;
  /**
   * <pre>
   *设置人像的背景图片。
   * </pre>
   *
   * <code>SetAvatarBackgroundImage = 6;</code>
   */
  public static final int SetAvatarBackgroundImage_VALUE = 6;
  /**
   * <pre>
   *设置三维人像渲染相机的位置及角度。
   * </pre>
   *
   * <code>Set3DEngineCameraPositionRotation = 7;</code>
   */
  public static final int Set3DEngineCameraPositionRotation_VALUE = 7;
  /**
   * <pre>
   *设置三维人像的可见性。
   * </pre>
   *
   * <code>SetAvatarVisible = 8;</code>
   */
  public static final int SetAvatarVisible_VALUE = 8;
  /**
   * <pre>
   *设置三维人像的几何属性。
   * </pre>
   *
   * <code>SetAvatarGeometry = 9;</code>
   */
  public static final int SetAvatarGeometry_VALUE = 9;
  /**
   * <pre>
   *执行嘴型序列。
   * </pre>
   *
   * <code>ExecutePhenemSequence = 10;</code>
   */
  public static final int ExecutePhenemSequence_VALUE = 10;
  /**
   * <pre>
   *重新载入网页应用。
   * </pre>
   *
   * <code>ReloadWebApplication = 11;</code>
   */
  public static final int ReloadWebApplication_VALUE = 11;
  /**
   * <pre>
   *执行动作。
   * </pre>
   *
   * <code>InputAction = 12;</code>
   */
  public static final int InputAction_VALUE = 12;
  /**
   * <pre>
   *执行表情。
   * </pre>
   *
   * <code>InputExpression = 13;</code>
   */
  public static final int InputExpression_VALUE = 13;
  /**
   * <pre>
   *终止动作。
   * </pre>
   *
   * <code>TerminateAction = 14;</code>
   */
  public static final int TerminateAction_VALUE = 14;
  /**
   * <pre>
   *设置相机的位置。
   * </pre>
   *
   * <code>SetAvatarCameraPosition = 15;</code>
   */
  public static final int SetAvatarCameraPosition_VALUE = 15;
  /**
   * <pre>
   *执行人像特殊效果。
   * </pre>
   *
   * <code>ExecuteAvatarEffection = 16;</code>
   */
  public static final int ExecuteAvatarEffection_VALUE = 16;
  /**
   * <pre>
   *隐藏相机预览。
   * </pre>
   *
   * <code>HideCameraPreview = 17;</code>
   */
  public static final int HideCameraPreview_VALUE = 17;
  /**
   * <pre>
   *执行人像宏指令。
   * </pre>
   *
   * <code>ExecuteAvatarMacro = 18;</code>
   */
  public static final int ExecuteAvatarMacro_VALUE = 18;
  /**
   * <pre>
   *显示摄像头预览。
   * </pre>
   *
   * <code>ShowCameraPreview = 19;</code>
   */
  public static final int ShowCameraPreview_VALUE = 19;
  /**
   * <pre>
   *开始人脸检测。
   * </pre>
   *
   * <code>StartFaceDetect = 20;</code>
   */
  public static final int StartFaceDetect_VALUE = 20;
  /**
   * <pre>
   *开始人脸识别。
   * </pre>
   *
   * <code>StartFaceRecognize = 21;</code>
   */
  public static final int StartFaceRecognize_VALUE = 21;
  /**
   * <pre>
   *开始发送图片帧数据流。
   * </pre>
   *
   * <code>StartFrameVoip = 22;</code>
   */
  public static final int StartFrameVoip_VALUE = 22;
  /**
   * <pre>
   *开始扫描二维码。
   * </pre>
   *
   * <code>StartQrCodeScan = 23;</code>
   */
  public static final int StartQrCodeScan_VALUE = 23;
  /**
   * <pre>
   *开始二维码/嘉宾证混合扫描。
   * </pre>
   *
   * <code>StartExtQrOcrHybridScan = 24;</code>
   */
  public static final int StartExtQrOcrHybridScan_VALUE = 24;
  /**
   * <pre>
   *停止二维码/嘉宾证混合扫描。
   * </pre>
   *
   * <code>StopExtQrOcrHybridScan = 25;</code>
   */
  public static final int StopExtQrOcrHybridScan_VALUE = 25;
  /**
   * <pre>
   *停止二维码扫描。
   * </pre>
   *
   * <code>StopQrCodeScan = 26;</code>
   */
  public static final int StopQrCodeScan_VALUE = 26;
  /**
   * <pre>
   *报告，听到了人声。
   * </pre>
   *
   * <code>ReportHeardHumanVoice = 27;</code>
   */
  public static final int ReportHeardHumanVoice_VALUE = 27;
  /**
   * <pre>
   *报告，被唤醒。
   * </pre>
   *
   * <code>ReportWakedUp = 28;</code>
   */
  public static final int ReportWakedUp_VALUE = 28;
  /**
   * <pre>
   *要求退出。
   * </pre>
   *
   * <code>Quit = 29;</code>
   */
  public static final int Quit_VALUE = 29;
  /**
   * <pre>
   *报告精确语音指令。
   * </pre>
   *
   * <code>ReportAccurateVoiceCommand = 30;</code>
   */
  public static final int ReportAccurateVoiceCommand_VALUE = 30;
  /**
   * <pre>
   *报告语音识别结果。
   * </pre>
   *
   * <code>ReportVoiceRecognized = 31;</code>
   */
  public static final int ReportVoiceRecognized_VALUE = 31;
  /**
   * <pre>
   *报告二维码嘉宾证扫描结果。
   * </pre>
   *
   * <code>ReportQrOcrHybridScanResult = 32;</code>
   */
  public static final int ReportQrOcrHybridScanResult_VALUE = 32;
  /**
   * <pre>
   *报告二维码扫描结果。
   * </pre>
   *
   * <code>ReportQrCodeScanResult = 33;</code>
   */
  public static final int ReportQrCodeScanResult_VALUE = 33;
  /**
   * <pre>
   *报告人脸识别结果。
   * </pre>
   *
   * <code>ReportFaceRecognizeResult = 34;</code>
   */
  public static final int ReportFaceRecognizeResult_VALUE = 34;
  /**
   * <pre>
   *报告人脸消失。
   * </pre>
   *
   * <code>ReportFaceGone = 35;</code>
   */
  public static final int ReportFaceGone_VALUE = 35;
  /**
   * <pre>
   *报告人脸出现。
   * </pre>
   *
   * <code>ReportFaceDetected = 36;</code>
   */
  public static final int ReportFaceDetected_VALUE = 36;
  /**
   * <pre>
   *报告人脸检测细节更新。
   * </pre>
   *
   * <code>ReportFaceDetectUpdate = 37;</code>
   */
  public static final int ReportFaceDetectUpdate_VALUE = 37;
  /**
   * <pre>
   *报告发声完毕。
   * </pre>
   *
   * <code>ReportSpeechFinished = 38;</code>
   */
  public static final int ReportSpeechFinished_VALUE = 38;
  /**
   * <pre>
   *报告发声开始。
   * </pre>
   *
   * <code>ReportSpeechStarted = 39;</code>
   */
  public static final int ReportSpeechStarted_VALUE = 39;
  /**
   * <pre>
   *人体检测模块主动报告人体检测状态。
   * </pre>
   *
   * <code>ReportHumanBodyDetectStatus = 40;</code>
   */
  public static final int ReportHumanBodyDetectStatus_VALUE = 40;
  /**
   * <pre>
   *由前端发起的，向人体检测模块查询当前的人体检测状态。
   * </pre>
   *
   * <code>GetHumanBodyDetectStatus = 41;</code>
   */
  public static final int GetHumanBodyDetectStatus_VALUE = 41;
  /**
   * <pre>
   *人体检测模块，对于前端发起的查询做出回复。
   * </pre>
   *
   * <code>ReplyGetHumanBodyDetectStatus = 42;</code>
   */
  public static final int ReplyGetHumanBodyDetectStatus_VALUE = 42;
  /**
   * <pre>
   *设置语音识别引擎。
   * </pre>
   *
   * <code>SetVoiceRecognizeEngine = 43;</code>
   */
  public static final int SetVoiceRecognizeEngine_VALUE = 43;
  /**
   * <pre>
   *查询读卡器模块的状态。
   * </pre>
   *
   * <code>CardReaderGetDeviceStatus = 44;</code>
   */
  public static final int CardReaderGetDeviceStatus_VALUE = 44;
  /**
   * <pre>
   *读卡器模块开始做出读卡动作。
   * </pre>
   *
   * <code>CardReaderGetCardInfo = 45;</code>
   */
  public static final int CardReaderGetCardInfo_VALUE = 45;
  /**
   * <pre>
   *读卡器模块停止读卡动作。
   * </pre>
   *
   * <code>CardReaderStopReadCard = 46;</code>
   */
  public static final int CardReaderStopReadCard_VALUE = 46;
  /**
   * <pre>
   *终止发声。
   * </pre>
   *
   * <code>CancelPendingTts = 47;</code>
   */
  public static final int CancelPendingTts_VALUE = 47;
  /**
   * <pre>
   *语音合成或播放录音发声。
   * </pre>
   *
   * <code>Speak = 48;</code>
   */
  public static final int Speak_VALUE = 48;
  /**
   * <pre>
   *     StopArchiveSoundRecord=49; //停止存档式录音。已废弃。
   *     StartArchiveSoundRecord=50; //开始存档式录音。已废弃。
   * </pre>
   *
   * <code>SetMultiTouchEnabled = 51;</code>
   */
  public static final int SetMultiTouchEnabled_VALUE = 51;
  /**
   * <pre>
   *显示错误码页面。
   * </pre>
   *
   * <code>ShowErrorCodePage = 52;</code>
   */
  public static final int ShowErrorCodePage_VALUE = 52;
  /**
   * <pre>
   *最小化．
   * </pre>
   *
   * <code>Minimize = 53;</code>
   */
  public static final int Minimize_VALUE = 53;
  /**
   * <pre>
   *显示开发者工具。
   * </pre>
   *
   * <code>ShowDeveloperTools = 54;</code>
   */
  public static final int ShowDeveloperTools_VALUE = 54;
  /**
   * <pre>
   *报告，窗口被激活。
   * </pre>
   *
   * <code>ReportWindowActivated = 55;</code>
   */
  public static final int ReportWindowActivated_VALUE = 55;
  /**
   * <pre>
   *报告，错误码。
   * </pre>
   *
   * <code>ReportErrorCode = 56;</code>
   */
  public static final int ReportErrorCode_VALUE = 56;
  /**
   * <pre>
   *显示设置页面。
   * </pre>
   *
   * <code>ShowSettingsPage = 57;</code>
   */
  public static final int ShowSettingsPage_VALUE = 57;
  /**
   * <pre>
   *恢复窗口。
   * </pre>
   *
   * <code>RestoreWindow = 58;</code>
   */
  public static final int RestoreWindow_VALUE = 58;
  /**
   * <pre>
   *结束连续语音识别。
   * </pre>
   *
   * <code>FinishVoiceRecognize = 59;</code>
   */
  public static final int FinishVoiceRecognize_VALUE = 59;
  /**
   * <pre>
   *在线语音合成。
   * </pre>
   *
   * <code>OnlineTts = 60;</code>
   */
  public static final int OnlineTts_VALUE = 60;
  /**
   * <pre>
   *停止语音识别。
   * </pre>
   *
   * <code>StopVoiceRecognize = 61;</code>
   */
  public static final int StopVoiceRecognize_VALUE = 61;
  /**
   * <pre>
   *报告宏执行结束。
   * </pre>
   *
   * <code>ReportMacroFinished = 62;</code>
   */
  public static final int ReportMacroFinished_VALUE = 62;
  /**
   * <pre>
   *报告宏语音执行结束。
   * </pre>
   *
   * <code>ReportMacroVoiceFinished = 63;</code>
   */
  public static final int ReportMacroVoiceFinished_VALUE = 63;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AmqpFunctionName valueOf(int value) {
    return forNumber(value);
  }

  public static AmqpFunctionName forNumber(int value) {
    switch (value) {
      case 0: return Nonsense;
      case 1: return StartVoiceRecognize;
      case 2: return SetLanguage;
      case 3: return ReportVoiceRecognizeProcessError;
      case 4: return ReportAudioSoundSource;
      case 5: return CancelPhenem;
      case 6: return SetAvatarBackgroundImage;
      case 7: return Set3DEngineCameraPositionRotation;
      case 8: return SetAvatarVisible;
      case 9: return SetAvatarGeometry;
      case 10: return ExecutePhenemSequence;
      case 11: return ReloadWebApplication;
      case 12: return InputAction;
      case 13: return InputExpression;
      case 14: return TerminateAction;
      case 15: return SetAvatarCameraPosition;
      case 16: return ExecuteAvatarEffection;
      case 17: return HideCameraPreview;
      case 18: return ExecuteAvatarMacro;
      case 19: return ShowCameraPreview;
      case 20: return StartFaceDetect;
      case 21: return StartFaceRecognize;
      case 22: return StartFrameVoip;
      case 23: return StartQrCodeScan;
      case 24: return StartExtQrOcrHybridScan;
      case 25: return StopExtQrOcrHybridScan;
      case 26: return StopQrCodeScan;
      case 27: return ReportHeardHumanVoice;
      case 28: return ReportWakedUp;
      case 29: return Quit;
      case 30: return ReportAccurateVoiceCommand;
      case 31: return ReportVoiceRecognized;
      case 32: return ReportQrOcrHybridScanResult;
      case 33: return ReportQrCodeScanResult;
      case 34: return ReportFaceRecognizeResult;
      case 35: return ReportFaceGone;
      case 36: return ReportFaceDetected;
      case 37: return ReportFaceDetectUpdate;
      case 38: return ReportSpeechFinished;
      case 39: return ReportSpeechStarted;
      case 40: return ReportHumanBodyDetectStatus;
      case 41: return GetHumanBodyDetectStatus;
      case 42: return ReplyGetHumanBodyDetectStatus;
      case 43: return SetVoiceRecognizeEngine;
      case 44: return CardReaderGetDeviceStatus;
      case 45: return CardReaderGetCardInfo;
      case 46: return CardReaderStopReadCard;
      case 47: return CancelPendingTts;
      case 48: return Speak;
      case 51: return SetMultiTouchEnabled;
      case 52: return ShowErrorCodePage;
      case 53: return Minimize;
      case 54: return ShowDeveloperTools;
      case 55: return ReportWindowActivated;
      case 56: return ReportErrorCode;
      case 57: return ShowSettingsPage;
      case 58: return RestoreWindow;
      case 59: return FinishVoiceRecognize;
      case 60: return OnlineTts;
      case 61: return StopVoiceRecognize;
      case 62: return ReportMacroFinished;
      case 63: return ReportMacroVoiceFinished;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AmqpFunctionName>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AmqpFunctionName> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AmqpFunctionName>() {
          public AmqpFunctionName findValueByNumber(int number) {
            return AmqpFunctionName.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.stupidbeauty.hxlauncher.AmqpFunctionNameProtos.getDescriptor().getEnumTypes().get(0);
  }

  private static final AmqpFunctionName[] VALUES = values();

  public static AmqpFunctionName valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AmqpFunctionName(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.stupidbeauty.hxlauncher.AmqpFunctionName)
}

